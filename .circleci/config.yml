jobs:
  test-3.8-production:
    docker:
    - {image: python:3.8}
    environment: {COLUMNS: '160', COVER_PACKAGES: 'compmake_tests,compmake.utils.table_formatter,compmake.utils.terminal_size,compmake.exceptions,compmake.utils.colored,compmake.utils.time_track,compmake_plugins.event_debugger,compmake.config_list,compmake.utils.coloredterm,compmake_plugins.graph,compmake_plugins.credits,compmake.context,compmake_plugins.details_why,compmake.actions_newprocess,compmake_plugins.backend_local.manager_local,compmake.utils.strings_with_escapes,compmake.config_optparse,compmake.priority,compmake.ui,compmake.__main__,compmake_plugins.graph_animation_imp,compmake_plugins.backend_ssh_cluster.cluster_conf,compmake_plugins.backend_pmake.parmake_job2_imp,compmake,compmake_plugins.backend_pmake.pmake_manager,compmake.config_ui,compmake.coloredlog,compmake.utils.timedate,compmake.visualization,compmake.structure,compmake.cachequerydb,compmake_plugins.backend_ssh_cluster.manager_ssh_cluster,compmake.utils.which_imp,compmake.events_structures,compmake.utils,compmake_plugins.backend_pmake,compmake_plugins.backend_local,compmake.job_execution,compmake.helpers,compmake.script_utils,compmake.console,compmake.utils.values_interpretation,compmake.utils.proctitle,compmake.structures,compmake_plugins.reload_module,compmake.utils.values_interpretation_test,compmake.actions,compmake.filesystem,compmake.utils.system_stats,compmake.utils.instantiate_utils,compmake.queries,compmake_plugins.backend_pmake.pmakesub,compmake.utils.capture,compmake_plugins.job_definition_status,compmake_plugins.backend_local.commands,compmake.master,compmake.redisdb,compmake_plugins.console_status,compmake.constants,compmake.registrar,compmake.utils.pickle_frustration,compmake_plugins.execution_stats,compmake_plugins,compmake_plugins.backend_ssh_cluster,compmake.commands_html,compmake.types,compmake_plugins.list_jobs_imp,compmake.result_dict,compmake.state,compmake.utils.pickling_utils,compmake_plugins.backend_ssh_cluster.commands,compmake.interpret,compmake.progress_imp2,compmake_plugins.sanity_check,compmake.readcommands,compmake_plugins.stats,compmake_plugins.details,compmake_plugins.execution_stats.ex_stats,compmake.manager,compmake_plugins.console_banners,compmake_plugins.tracker,compmake.parsing,compmake.utils.safe_pickle,compmake.memorycache,compmake.config_html,compmake_plugins.dump,compmake.utils.docstring,compmake.uptodate,compmake.utils.format_exceptions,compmake.utils.wildcards,compmake_plugins.backend_pmake.commands,compmake.utils.frozen,compmake.colored,compmake_plugins.gantt,compmake.dependencies,compmake.registered_events,compmake_plugins.console_output,compmake.context_imp,compmake_plugins.debug_priority,compmake.utils.memoize_imp,compmake_plugins.clear_imp,compmake_plugins.commands_status,compmake.readrcfiles,compmake.storage,compmake.commands',
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,
      TEST_PACKAGES: compmake_tests}
    steps:
    - checkout
    - run: {command: "mkdir -p  build-stats\nenv | tee  build-stats/env.txt\n", name: Build
          stats (1)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "pip3 install -U pip\npip3 install pipdeptree coverage shyaml\n\
          \nshyaml get-values install_requires < project.pp1.yaml > .requirements.txt\n\
          pip3 install  -r .requirements.txt\nrm .requirements.txt\n", name: Install
          deps}
    - run: {command: "shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt\n\
          pip3 install -r .requirements_tests.txt\nrm .requirements_tests.txt\n\n\
          pip install \t\tpipdeptree==0.13.2\t\tbump2version\t\tnose==1.3.7\t\tnose2==0.10\t\
          \tnose2-html-report==0.6.0\t\tnose-parallel==0.4.0\t\tnose_xunitmp==0.4.1\t\
          \tpre-commit==2.11.1\t\trednose==1.3.0\t\tcoverage\tsphinx\t\tsphinx-rtd-theme\n",
        name: Install testing deps}
    - run: {command: "echo TERM = $TERM\n\npipdeptree | tee  build-stats/pipdeptree.txt\n\
          pip list   | tee  build-stats/pip-list.txt\npip freeze | tee  build-stats/pip-freeze.txt\n",
        name: Build stats (2)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "python setup.py develop --prefix ~/.local --no-deps\n", name: setup.py
          develop}
    - run: {command: "FILE=src/conf.py\nmkdir -p out/docs\nif test -f \"$FILE\"; then\n\
          \    sphinx-build src out/docs\nfi\n", name: Make docs}
    - store_artifacts: {destination: docs, path: out/docs, when: always}
    - run: {command: "mkdir -p out/test-results\nxunit_output=out/test-results/nose-${CIRCLE_NODE_INDEX}-xunit.xml\n\
          \n#              --processes=8 --process-timeout=1000 --process-restartworker\
          \ \\\n# --cover-packages=${COVER_PACKAGES} \\\nnosetests \\\n  --rednose\
          \ --immediate \\\n  --cover-tests --with-coverage \\\n  --with-xunitmp --xunitmp-file=${xunit_output}\
          \ \\\n  --cover-packages=${COVER_PACKAGES} \\\n  ${TEST_PACKAGES}\n", name: Run
          tests}
    - store_test_results: {path: out/test-results, when: always}
    - run: {command: "coverage combine\ncoverage html -d out/coverage\ncoverage xml\n",
        name: Coverage report, when: always}
    - store_artifacts: {destination: coverage, path: out/coverage, when: always}
    - store_artifacts: {destination: tests, path: out/tests, when: always}
    - run: {command: "bash <(curl -s https://codecov.io/bash)\n", name: CodeCov, when: always}
    working_directory: ~/repo
  test-3.8-staging:
    docker:
    - {image: python:3.8}
    environment: {COLUMNS: '160', COVER_PACKAGES: 'compmake_tests,compmake.utils.table_formatter,compmake.utils.terminal_size,compmake.exceptions,compmake.utils.colored,compmake.utils.time_track,compmake_plugins.event_debugger,compmake.config_list,compmake.utils.coloredterm,compmake_plugins.graph,compmake_plugins.credits,compmake.context,compmake_plugins.details_why,compmake.actions_newprocess,compmake_plugins.backend_local.manager_local,compmake.utils.strings_with_escapes,compmake.config_optparse,compmake.priority,compmake.ui,compmake.__main__,compmake_plugins.graph_animation_imp,compmake_plugins.backend_ssh_cluster.cluster_conf,compmake_plugins.backend_pmake.parmake_job2_imp,compmake,compmake_plugins.backend_pmake.pmake_manager,compmake.config_ui,compmake.coloredlog,compmake.utils.timedate,compmake.visualization,compmake.structure,compmake.cachequerydb,compmake_plugins.backend_ssh_cluster.manager_ssh_cluster,compmake.utils.which_imp,compmake.events_structures,compmake.utils,compmake_plugins.backend_pmake,compmake_plugins.backend_local,compmake.job_execution,compmake.helpers,compmake.script_utils,compmake.console,compmake.utils.values_interpretation,compmake.utils.proctitle,compmake.structures,compmake_plugins.reload_module,compmake.utils.values_interpretation_test,compmake.actions,compmake.filesystem,compmake.utils.system_stats,compmake.utils.instantiate_utils,compmake.queries,compmake_plugins.backend_pmake.pmakesub,compmake.utils.capture,compmake_plugins.job_definition_status,compmake_plugins.backend_local.commands,compmake.master,compmake.redisdb,compmake_plugins.console_status,compmake.constants,compmake.registrar,compmake.utils.pickle_frustration,compmake_plugins.execution_stats,compmake_plugins,compmake_plugins.backend_ssh_cluster,compmake.commands_html,compmake.types,compmake_plugins.list_jobs_imp,compmake.result_dict,compmake.state,compmake.utils.pickling_utils,compmake_plugins.backend_ssh_cluster.commands,compmake.interpret,compmake.progress_imp2,compmake_plugins.sanity_check,compmake.readcommands,compmake_plugins.stats,compmake_plugins.details,compmake_plugins.execution_stats.ex_stats,compmake.manager,compmake_plugins.console_banners,compmake_plugins.tracker,compmake.parsing,compmake.utils.safe_pickle,compmake.memorycache,compmake.config_html,compmake_plugins.dump,compmake.utils.docstring,compmake.uptodate,compmake.utils.format_exceptions,compmake.utils.wildcards,compmake_plugins.backend_pmake.commands,compmake.utils.frozen,compmake.colored,compmake_plugins.gantt,compmake.dependencies,compmake.registered_events,compmake_plugins.console_output,compmake.context_imp,compmake_plugins.debug_priority,compmake.utils.memoize_imp,compmake_plugins.clear_imp,compmake_plugins.commands_status,compmake.readrcfiles,compmake.storage,compmake.commands',
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,
      TEST_PACKAGES: compmake_tests}
    steps:
    - checkout
    - run: {command: "mkdir -p  build-stats\nenv | tee  build-stats/env.txt\n", name: Build
          stats (1)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "pip3 install -U pip\npip3 install pipdeptree coverage shyaml\n\
          \nshyaml get-values install_requires < project.pp1.yaml > .requirements.txt\n\
          pip3 install  -r .requirements.txt\nrm .requirements.txt\n", name: Install
          deps}
    - run: {command: "shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt\n\
          pip3 install -r .requirements_tests.txt\nrm .requirements_tests.txt\n\n\
          pip install \t\tpipdeptree==0.13.2\t\tbump2version\t\tnose==1.3.7\t\tnose2==0.10\t\
          \tnose2-html-report==0.6.0\t\tnose-parallel==0.4.0\t\tnose_xunitmp==0.4.1\t\
          \tpre-commit==2.11.1\t\trednose==1.3.0\t\tcoverage\tsphinx\t\tsphinx-rtd-theme\n",
        name: Install testing deps}
    - run: {command: "echo TERM = $TERM\n\npipdeptree | tee  build-stats/pipdeptree.txt\n\
          pip list   | tee  build-stats/pip-list.txt\npip freeze | tee  build-stats/pip-freeze.txt\n",
        name: Build stats (2)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "python setup.py develop --prefix ~/.local --no-deps\n", name: setup.py
          develop}
    - run: {command: "FILE=src/conf.py\nmkdir -p out/docs\nif test -f \"$FILE\"; then\n\
          \    sphinx-build src out/docs\nfi\n", name: Make docs}
    - store_artifacts: {destination: docs, path: out/docs, when: always}
    - run: {command: "mkdir -p out/test-results\nxunit_output=out/test-results/nose-${CIRCLE_NODE_INDEX}-xunit.xml\n\
          \n#              --processes=8 --process-timeout=1000 --process-restartworker\
          \ \\\n# --cover-packages=${COVER_PACKAGES} \\\nnosetests \\\n  --rednose\
          \ --immediate \\\n  --cover-tests --with-coverage \\\n  --with-xunitmp --xunitmp-file=${xunit_output}\
          \ \\\n  --cover-packages=${COVER_PACKAGES} \\\n  ${TEST_PACKAGES}\n", name: Run
          tests}
    - store_test_results: {path: out/test-results, when: always}
    - run: {command: "coverage combine\ncoverage html -d out/coverage\ncoverage xml\n",
        name: Coverage report, when: always}
    - store_artifacts: {destination: coverage, path: out/coverage, when: always}
    - store_artifacts: {destination: tests, path: out/tests, when: always}
    - run: {command: "bash <(curl -s https://codecov.io/bash)\n", name: CodeCov, when: always}
    working_directory: ~/repo
version: 2
workflows:
  test:
    jobs:
    - test-3.8-staging:
        context: pip-staging
        filters:
          branches: {only: /z7-stage.*/}
    - test-3.8-production:
        context: z7-production
        filters:
          branches: {ignore: /z7-stage.*/}
  version: 2

# sigil 50eedbdc63ccb4ed084b25fcd48893ee
